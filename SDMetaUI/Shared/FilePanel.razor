@using SDMetaTool;
@using SDMetaUI.Models;
@inject IJSRuntime JSRuntime

<table class="table">
	<thead>
		<tr>
			<th scope="col">Prompt</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td scope="row">
				<div class="scroll" style="max-height: 150px;">
					<small>@selectedFileParams?.Prompt</small>
				</div>
			</td>
		</tr>
	</tbody>
</table>
@if (string.IsNullOrWhiteSpace(@selectedFileParams?.NegativePrompt) == false)
{
	<table class="table">
		<thead>
			<tr>
				<th scope="col">Negatives</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td scope="row">
					<div class="scroll" style="max-height: 150px;">
						<small>@selectedFileParams?.NegativePrompt</small>
					</div>
				</td>
			</tr>
		</tbody>
	</table>
}
<table class="table">
	<thead>
		<tr>
			<th scope="col">Param</th>
			<th scope="col">Value</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<th scope="row">Date</th>
			<td>@selectedFile?.LastUpdated</td>
		</tr>
		@if (string.IsNullOrWhiteSpace(selectedFileParams?.Model) == false)
		{
			<tr>
				<th scope="row">Model</th>
				<td>@selectedFileParams?.Model</td>
			</tr>
		}
		<tr>
			<th scope="row">Model hash</th>
			<td>@selectedFileParams?.ModelHash</td>
		</tr>
		<tr>
			<th scope="row">Sampler</th>
			<td>@selectedFileParams?.Sampler</td>
		</tr>
		<tr>
			<th scope="row">Cfg scale</th>
			<td>@selectedFileParams?.CFGScale</td>
		</tr>
		<tr>
			<th scope="row">Steps</th>
			<td>@selectedFileParams?.Steps</td>
		</tr>
	</tbody>
</table>
<table class="table">
	<tbody>
		<tr>
			<td scope="row">
				<HxButton Outline="false" Icon="BootstrapIcon.Clipboard" Text="Copy" Color="ThemeColor.Primary" @onclick="CopyTextToClipboard" />
				<textarea id="selectedFileParams-textarea" cols="40" rows="5" style="position: absolute; left: -10000px;">@selectedFileParams?.GetFullPrompt()</textarea>
				<HxButton Outline="false" Icon="BootstrapIcon.Fullscreen" Text="View" Color="ThemeColor.Primary" @onclick="() => fullScreenView.ShowAsync()" />
				<HxButton Outline="false" Icon="BootstrapIcon.Trash" Text="Delete" Color="ThemeColor.Danger" @onclick="(e) => onDelete.InvokeAsync(e)" />
			</td>
		</tr>
	</tbody>
</table>
<Thumbnail file="@(selectedFile)" @onclick="() => fullScreenView.ShowAsync()" />

<FullScreenView @ref=@fullScreenView selectedFile=@selectedFile />

@code {
	[Parameter]
	public PngFileViewModel selectedFile { get; set; }

	[Parameter]
	public EventCallback<MouseEventArgs> onDelete { get; set; }

	private FullScreenView? fullScreenView;

	private GenerationParams selectedFileParams;

	protected override Task OnInitializedAsync()
	{
		selectedFileParams = selectedFile?.Parameters;
		return base.OnInitializedAsync();
	}

	private async Task CopyTextToClipboard()
	{
		await JSRuntime.InvokeVoidAsync("copyClipboard", "selectedFileParams-textarea");
	}
}