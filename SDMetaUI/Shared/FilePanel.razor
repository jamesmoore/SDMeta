@using SDMetaTool;
@using SDMetaUI.Models;
@inject IJSRuntime JSRuntime
@inject IHxMessengerService Messenger

<HxMessenger Position="ToastContainerPosition.TopEnd" />
@if (string.IsNullOrWhiteSpace(@selectedFileParams?.Prompt) == false)
{
	<table class="table">
		<thead>
			<tr>
				<th scope="col">Prompt</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td scope="row">
					<div class="scroll" style="max-height: 300px;">
						<small>
							<pre>@selectedFileParams?.Prompt</pre>
							@if (string.IsNullOrWhiteSpace(@selectedFileParams?.NegativePrompt) == false)
							{
								<pre><strong>Negative prompt:</strong> @selectedFileParams?.NegativePrompt</pre>
							}
						</small>
					</div>
				</td>
			</tr>
		</tbody>
	</table>
}

<table class="table">
	<thead>
		<tr>
			<th scope="col">Param</th>
			<th scope="col">Value</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var paramitem in parameters)
		{
			<tr>
				<th scope="row">@paramitem.key</th>
				<td>@paramitem.value</td>
			</tr>
		}
	</tbody>
</table>
<table class="table">
	<tbody>
		<tr>
			<td scope="row">
				<HxButton Outline="false" Icon="BootstrapIcon.Clipboard" Text="Copy" Color="ThemeColor.Primary" @onclick="CopyTextToClipboard" />
				<textarea id="selectedFileParams-textarea" cols="40" rows="5" style="position: absolute; left: -10000px;">@selectedFileParams?.GetFullPrompt()</textarea>
				<HxButton Outline="false" Icon="BootstrapIcon.Fullscreen" Text="View" Color="ThemeColor.Primary" @onclick="(e) => onFullScreenView.InvokeAsync(e)" />
				<HxButton Outline="false" Icon="BootstrapIcon.Trash" Text="Delete" Color="ThemeColor.Danger" @onclick="(e) => onDelete.InvokeAsync(e)" accesskey="x" />
			</td>
		</tr>
	</tbody>
</table>
<div class="text-center">
	<HxTooltip Text=@selectedFile.FileName Placement="TooltipPlacement.Auto">
		<Thumbnail file=@selectedFile @onclick="(e) => onFullScreenView.InvokeAsync(e)" />
	</HxTooltip>
</div>
@code {
	[Parameter]
	public PngFileViewModel selectedFile { get; set; }

	[Parameter]
	public EventCallback<MouseEventArgs> onDelete { get; set; }

	[Parameter]
	public EventCallback<MouseEventArgs> onFullScreenView { get; set; }

	private GenerationParams? selectedFileParams;

	private IEnumerable<(string key, string value)> parameters;

	protected override Task OnParametersSetAsync()
	{
		selectedFileParams = selectedFile?.Parameters;

		parameters = new List<(string key, string value)>
		{
			new ("Date", selectedFile?.LastUpdated.ToString()),
			new ("Model", selectedFileParams?.Model),
			new ("Model hash", selectedFileParams?.ModelHash),
			new ("Sampler", selectedFileParams?.Sampler),
			new ("Cfg scale", selectedFileParams?.CFGScale),
			new ("Steps", selectedFileParams?.Steps),
		}.Where(p => string.IsNullOrWhiteSpace(p.value) == false);

		return base.OnParametersSetAsync();
	}

	private async Task CopyTextToClipboard()
	{
		await JSRuntime.InvokeVoidAsync("copyClipboard", "selectedFileParams-textarea");
		Messenger.AddInformation(title: "Prompt", message: "Copied to clipboard");
	}
}