@using SDMetaTool;
@using SDMetaTool.Cache;
@using SDMetaUI.Models;
@inject IJSRuntime JSRuntime
@inject IHxMessengerService Messenger
@inject IPngFileDataSource pngfileDataSource

<div class="main">
	<div class="text-center">
		<HxTooltip Text=@selectedFile.FileName Placement="TooltipPlacement.Auto">
			<Thumbnail file=@selectedFile @onclick="(e) => onFullScreenView.InvokeAsync(e)" />
		</HxTooltip>
	</div>
	<div style="flex: 1">
		<div class="main">
			<div>
				<div class="preformatted py-1">
					@selectedFile.FileName
				</div>
				<div class="preformatted pb-1">
					<span class="text-info fw-bold">Size:</span> @fileSize | <span class="text-info fw-bold">Date:</span> @lastUpdated
				</div>
			</div>
			<div style="margin-left: auto">
				<button type="button" class="btn-close mx-2" aria-label="Close" @onclick="(e)=> onClose.InvokeAsync(e)"></button>
			</div>
		</div>

		@if (string.IsNullOrWhiteSpace(@selectedFileParams?.Prompt) == false)
		{
			<hr style="margin-top: 4px; margin-bottom: 4px;" />
			@foreach (var x in promptLines)
			{
				<div class="preformatted">@((MarkupString)x)</div>
			}
			<hr style="margin-top: 4px; margin-bottom: 8px;" />
			<HxButton Outline="false" Icon="BootstrapIcon.Clipboard" Size="ButtonSize.Small" Text="Copy" Color="ThemeColor.Primary" @onclick="CopyTextToClipboard" />
			<textarea id="selectedFileParams-textarea" cols="40" rows="5" style="position: absolute; left: -10000px;">@selectedFileParams?.GetFullPrompt()</textarea>
			<HxButton Outline="false" Icon="BootstrapIcon.Fullscreen" Size="ButtonSize.Small" Text="View" Color="ThemeColor.Primary" @onclick="(e) => onFullScreenView.InvokeAsync(e)" />
			<HxButton Outline="false" Icon="BootstrapIcon.Trash" Size="ButtonSize.Small" Text="Delete" Color="ThemeColor.Danger" @onclick="(e) => onDelete.InvokeAsync(e)" accesskey="x" CssClass="float-end mx-2" />
		}
	</div>
</div>

@code {
	[Parameter]
	public PngFileViewModel selectedFile { get; set; }

	[Parameter]
	public EventCallback<MouseEventArgs> onDelete { get; set; }

	[Parameter]
	public EventCallback<MouseEventArgs> onClose { get; set; }

	[Parameter]
	public EventCallback<MouseEventArgs> onFullScreenView { get; set; }

	private GenerationParams? selectedFileParams;

	private string fileSize;
	private string lastUpdated;

	private IEnumerable<string> promptLines;

	protected override Task OnParametersSetAsync()
	{
		var realFile = pngfileDataSource.ReadPngFile(selectedFile.FileName);
		fileSize = realFile.Length.GetBytesReadable();
		lastUpdated = realFile.LastUpdated.ToString();
		selectedFileParams = realFile?.Parameters;

		this.promptLines = selectedFileParams?.GetFullPrompt().Split("\n").Select(p => p.Trim()).Select(p => p.FormatPromptLine()).ToList();

		return base.OnParametersSetAsync();
	}

	private async Task CopyTextToClipboard()
	{
		await JSRuntime.InvokeVoidAsync("copyClipboard", "selectedFileParams-textarea");
		Messenger.AddInformation(title: "Prompt", message: "Copied to clipboard");
	}
}