@page "/"
@using SDMetaTool.Processors;
@using SDMetaUI.Models;
@using SDMetaTool;
@using System.IO.Abstractions;
@using System.Web;
@using SDMetaTool.Cache;
@using SDMetaUI.Services;
@using SDMetaUI.Shared;

@implements IDisposable;

@inject IPngFileDataSource pngfileDataSource
@inject Rescan rescan
@inject IConfiguration configuration;
@inject IThumbnailService thumbnailService;
@inject ILogger<Index> logger;

<PageTitle>Gallery</PageTitle>

@if (files == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="row p-2" style="position: sticky; top: 0; z-index: 1; background: rgba(128, 128, 128, 0.5); border-bottom-color: rgba(128, 128, 128, 0.75); border-bottom-width: 1px; border-bottom-style: solid;">
		<div class="col-3">
			<label class="visually-hidden" for="autoSizingInput">Filter</label>
			<input type="search" @oninput="onInputDebounced" class="form-control" id="autoSizingInput" placeholder="filter">
		</div>
		<div class="col-auto">
			<label class="visually-hidden" for="autoSizingSelect">Preference</label>
			<select class="form-select" id="autoSizingSelect" @onchange="OnSelectGroupMode">
				@foreach (var template in GroupModes)
				{
					<option value=@template>@template</option>
				}
			</select>
		</div>
		<div class="col-auto">
			<HxButton Outline="false" Icon="BootstrapIcon.ArrowClockwise" Text="Rescan" Color="ThemeColor.Primary" @onclick="Rescan" Enabled=@RescanEnabled />
		</div>
		<div class="col-auto ms-auto py-1">
			<h6>
				@if (files.Count < allFiles.Count)
				{
					<text>
						@files.Count of
					</text>
				}
				@allFiles.Count items
			</h6>
		</div>
	</div>
	<Virtualize Items=@files Context="file" OverscanCount="60" ItemSize="185">
		<Thumbnail file=@file selected=@(selectedFile == file) onclick="() => imageClick(file, true)" @key=@file />

		@if (file.Expanded)
		{
			<div class="divider"><div class="divider-text is-center"><span>@(expandedfiles.Count.ToString() + " gens of this prompt")</span></div></div>

			foreach (var file in expandedfiles)
			{
				<Thumbnail file=@file selected=@(selectedFile == file) onclick="() => imageClick(file, false)" />
			}
			<div class="divider"></div>
		}
	</Virtualize>

	<HxOffcanvas @ref="offcanvasEnd" Placement="OffcanvasPlacement.End" ScrollingEnabled="true" Backdrop="OffcanvasBackdrop.False">
		<BodyTemplate>
			@if (selectedFile != null)
			{
				<FilePanel selectedFile="@selectedFile" onDelete="() => imageDelete()" onFullScreenView="(e) => fullScreenView.ShowAsync()" />
			}
		</BodyTemplate>
	</HxOffcanvas>

	<FullScreenView @ref=@fullScreenView selectedFile=@selectedFile onLeft=@leftKey onRight=@rightKey />
}
@code {

	private HxOffcanvas? offcanvasEnd;
	private FullScreenView? fullScreenView;

	static List<string> GroupModes = new List<string>() {
		"Each gen",
		"Grouped by prompt"
	};
	string GroupMode = GroupModes.First();
	private IList<PngFileViewModel> allFiles = null;
	private IList<PngFileViewModel> files = null;
	private IList<PngFileViewModel> expandedfiles = null;
	private PngFileViewModel selectedFile = null;
	private bool RescanEnabled = true;

	private string filter = "";

	Action<ChangeEventArgs> onInputDebounced;

	protected override async Task OnInitializedAsync()
	{
		allFiles = pngfileDataSource.GetAll().Where(p => p.Exists == true).OrderByDescending(p => p.LastUpdated).Select(p => PngFileViewModel.FromModel(p)).ToList();
		SetFiles();
		onInputDebounced = Debounce<ChangeEventArgs>(e =>
		{
			this.InvokeAsync(() =>
			{
				this.filter = (string)e.Value;
				SetFiles();
				this.StateHasChanged();
			});
		}, TimeSpan.FromMilliseconds(300));
	}

	void OnSelectGroupMode(ChangeEventArgs e)
	{
		GroupMode = e.Value.ToString();
		SetFiles();
	}

	private void SetFiles()
	{
		files = allFiles.ToList();
		if (string.IsNullOrWhiteSpace(filter) == false)
		{
			files = allFiles.Where(p =>
				p.Prompt.Contains(filter, StringComparison.InvariantCultureIgnoreCase) ||
				p.Filename.Contains(filter, StringComparison.InvariantCultureIgnoreCase)
			).ToList();
		}

		if (this.IsGrouped())
		{
			files = files.GroupBy(p => p.FullPromptHash).Select(p => p.LastOrDefault()).ToList();
		}
		else
		{
			expandedfiles = Enumerable.Empty<PngFileViewModel>().ToList();
		}
	}

	private bool IsGrouped()
	{
		return GroupMode == GroupModes[1];
	}

	private async void imageClick(PngFileViewModel model, bool isParent)
	{
		if (isParent && IsGrouped())
		{
			model.Expanded = !model.Expanded;
			foreach (var file in files)
			{
				if (file.Expanded && file != model)
				{
					file.Expanded = false;
				}
			}

			if (model.Expanded)
			{
				expandedfiles = allFiles.Where(p => p.FullPromptHash == model.FullPromptHash).ToList();
			}
			else
			{
				expandedfiles = Enumerable.Empty<PngFileViewModel>().ToList();
			}

			this.selectedFile = model;
		}
		else
		{
			if (model == selectedFile)
			{
				await fullScreenView.ShowAsync();
			}

			this.selectedFile = model;
			await offcanvasEnd.ShowAsync();
		}
	}

	private async Task Rescan()
	{
		await Task.Run(() =>
		{
			var directory = configuration["ImageDir"];
			this.rescan.ProcessPngFiles(directory);
			logger.LogInformation("Rescan done");
		});
		await OnInitializedAsync();
	}

	public void Dispose()
	{
		pngfileDataSource.Dispose();
	}

	private async void imageDelete()
	{
		if (this.selectedFile != null)
		{
			File.Delete(this.selectedFile.Filename);
			await offcanvasEnd.HideAsync();
			var original = pngfileDataSource.ReadPngFile(this.selectedFile.Filename);
			original.Exists = false;
			pngfileDataSource.WritePngFile(original);
			this.thumbnailService.Delete(this.selectedFile.Filename);
			this.allFiles.Remove(selectedFile);
			this.files.Remove(selectedFile);
			this.expandedfiles.Remove(selectedFile);
			this.selectedFile = null;
			this.StateHasChanged();
		}
	}

	private async void leftKey()
	{
		var index = files.IndexOf(selectedFile);
		if (index > 0)
		{
			selectedFile = files[index - 1];
		}
	}

	private async void rightKey()
	{
		var index = files.IndexOf(selectedFile);
		if (index < files.Count - 1)
		{
			selectedFile = files[index + 1];
		}
	}

	// https://www.meziantou.net/debouncing-throttling-javascript-events-in-a-blazor-application.htm
	Action<T> Debounce<T>(Action<T> action, TimeSpan interval)
	{
		if (action == null) throw new ArgumentNullException(nameof(action));

		var last = 0;
		return arg =>
		{
			var current = System.Threading.Interlocked.Increment(ref last);
			Task.Delay(interval).ContinueWith(task =>
			{
				if (current == last)
				{
					action(arg);
				}
			});
		};
	}
}
