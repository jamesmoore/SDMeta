@page "/"
@using BlazorPro.BlazorSize;
@using SDMetaTool.Processors;
@using SDMetaUI.Models;
@using SDMetaTool;
@using System.IO.Abstractions;
@using System.Web;
@using SDMetaTool.Cache;
@using SDMetaUI.Services;
@using SDMetaUI.Shared;

@implements IDisposable;

@inject IPngFileDataSource pngfileDataSource
@inject Rescan rescan
@inject IThumbnailService thumbnailService;
@inject ILogger<Index> logger;
@inject IResizeListener resizeListener;
@inject PngFileViewModelBuilder pngFileViewModelBuilder;
@inject IHxMessengerService Messenger
@inject NavigationManager NavigationManager
@inject FileSystemObserver FileSystemObserver
@inject ImageDir imageDir

<PageTitle>@("Gallery" + (string.IsNullOrWhiteSpace(this.Filter) ? "" : " - " + this.Filter))</PageTitle>
	<HxMessenger Position="ToastContainerPosition.BottomCenter" />

	@if (viewModel.HasData == false)
{
	<LoadingSpinner></LoadingSpinner>
}
else
{
	<div class="container-fluid sticky-top">
		<div class="row py-2 menu-bar">
			<div class="col-md-3 col-xs-12 py-2 py-md-0">
				<label class="visually-hidden" for="filterInput">Filter</label>
				<input type="search" @oninput="onInputDebounced" class="form-control" id="filterInput" placeholder="filter" @bind-value=@FilterInput>
			</div>
			<div class="col-md-3 col-xs-12 py-2 py-md-0">
				<label class="visually-hidden" for="modelSelect">Models</label>
				<select class="form-select" id="modelSelect" @onchange="OnSelectModel">
					@foreach (var template in this.modelsList)
					{
						<option value=@template.Id>@(template.Text)</option>
					}
				</select>
			</div>
			<div class="col-auto d-flex align-items-center py-2 py-md-0">
				<HxSwitch Text="Group by prompt" @bind-Value="@viewModel.IsGrouped" />
			</div>
			<div class="col-auto py-2 py-md-1">
				<HxButton Outline="false" Size="ButtonSize.Small" Icon="BootstrapIcon.ArrowClockwise" Text="Rescan" Color="ThemeColor.Primary" @onclick="Rescan" CssClass="position-relative">
					@if (this.Added != 0)
					{
						<HxBadge Color="ThemeColor.Success" CssClass="position-absolute top-0 start-100 translate-middle">+@this.Added</HxBadge>
					}
					@if (this.Removed != 0)
					{
						<HxBadge Color="ThemeColor.Danger" CssClass="position-absolute top-100 start-100 translate-middle">-@this.Removed</HxBadge>
					}
				</HxButton>
			</div>
			<div class="col-auto ms-auto">
				@viewModel.FilteredFileCount items
				<HxButton Outline="false" Icon="BootstrapIcon.Gear" Text="" Color="ThemeColor.Link" @onclick=@(() => NavigationManager.NavigateTo("/settings")) />
			</div>
			@if (scanProgess > 0)
			{
				<div class="pt-2">
					<HxProgress Height="2">
						<HxProgressBar Value=@scanProgess Color="ThemeColor.Info"/>
					</HxProgress>
				</div>
			}
		</div>
	</div>
	<div class="thumbnail-background">
		@if (viewModel.Rows != null)
		{
			<Virtualize Items=@viewModel.Rows Context="row" OverscanCount="5" ItemSize="@(ThumbnailService.ThumbnailSize + 8 * 2)">
				<div class="@((row.IsSubGroup ? "expanded-background" : "") + (row.IsStartOfGroup ? " expanded-top" : "") + (row.IsEndOfGroup ? " expanded-bottom": "" ))">
					@foreach (var file in row)
					{
						var selected = viewModel.SelectedFile == file;
						@if (viewModel.IsGrouped == false || row.IsSubGroup)
						{
							<Thumbnail File=@file Selected=@selected Expanded=@row.IsSubGroup onclick="(e) => imageClick(file)" @key=@file Text="" />
						}
						else if (file == viewModel.ExpandedFile)
						{
							<div class="expanded-tab">
								<Thumbnail File=@file Selected=false onclick="(e) => imageClickParent(file)" @key=@file Text=@(file?.SubItems?.Count.ToString()) />
							</div>
						}
						else
						{
							<Thumbnail File=@file Selected=false onclick="(e) => imageClickParent(file)" @key=@file Text="@(file?.SubItems?.Count.ToString())" />
						}
					}
				</div>
			</Virtualize>
		}
	</div>
	@if (viewModel.SelectedFile != null)
	{
		<div class="boffcanvas py-2">
			<FilePanel selectedFile=@viewModel.SelectedFile onDelete="() => imageDelete()" onFullScreenView="(e) => fullScreenView.ShowAsync()"  onClose="(e) => viewModel.SelectedFile = null" />
		</div>
	}

	<FullScreenView @ref=@fullScreenView selectedFile=@viewModel.SelectedFile onLeft=@leftKey onRight=@rightKey />
}
@code {

	[Parameter]
	[SupplyParameterFromQuery(Name = "filter")]
	public string? Filter { get; set; }

	private string FilterInput { get; set; }

	private HxOffcanvas? offcanvasEnd;
	private bool offcanvasEndOpen = false;
	private FullScreenView? fullScreenView;

	GalleryViewModel viewModel = null;
	Action<ChangeEventArgs> onInputDebounced;

	IList<ModelSummaryViewModel> modelsList;
	private int Added = 0;
	private int Removed = 0;

	/// <summary>
	/// For when the back/forward navigation is clicked
	/// </summary>
	/// <param name="sender"></param>
	/// <param name="e"></param>
	void LocationChanged(object sender, LocationChangedEventArgs e)
	{
		if (this.viewModel.Filter != this.Filter)
		{
			this.viewModel.Filter = this.Filter;
			this.FilterInput = this.Filter;
			this.StateHasChanged();
		}
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		this.viewModel = new GalleryViewModel(this.pngfileDataSource, pngFileViewModelBuilder);
		this.modelsList = this.pngfileDataSource.GetModelSummaryList().Select((p, i) => new ModelSummaryViewModel()
			{
				Id = (i + 1).ToString(),
				Count = p.Count,
				Model = p.Model,
				ModelHash = p.ModelHash,
				Text = (p.ModelHash ?? "<empty>") + " (" + (p.Model ?? "<no name>") + ") [" + p.Count + "]",
			}).ToList();
		modelsList.Insert(0, new ModelSummaryViewModel() { Id = "0", Text = "-- all models --" });
		NavigationManager.LocationChanged += LocationChanged;
		FileSystemObserver.FileSystemChanged += OnFileSystemChanged;
		FileSystemObserver.Start();
		this.rescan.ProgressNotification += ProgressNotification;
	}

	private float scanProgess = 0;

	private void ProgressNotification(object sender, float i)
	{
		this.InvokeAsync(() =>
		{
			scanProgess = i;
			this.StateHasChanged();
		});
	}

	private void OnFileSystemChanged(object sender, FileSystemEventArgs e)
	{
		logger.LogInformation("Filesystem change: " + e.ChangeType + " " + e.FullPath);
		this.InvokeAsync(() =>
		{
			this.Added = this.FileSystemObserver.Added;
			this.Removed = this.FileSystemObserver.Removed;
			this.StateHasChanged();
		});
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			onInputDebounced = Debounce<ChangeEventArgs>(e =>
			{
				this.InvokeAsync(() =>
				{
					var updatedFilter = (string)e.Value;
					if (updatedFilter == string.Empty) updatedFilter = null;
					viewModel.Filter = updatedFilter;
					NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameter("filter", updatedFilter));
					this.StateHasChanged();
				});
			}, TimeSpan.FromMilliseconds(500));

			resizeListener.OnResized += (sender, size) =>
			{
				viewModel.Width = size.Width;
				this.StateHasChanged();
			};

			if (viewModel.Width == 0)
			{
				viewModel.Width = (await resizeListener.GetBrowserWindowSize()).Width;
			}
			LoadData();
			// Update filter from initial URL
			this.viewModel.Filter = this.Filter;
			this.FilterInput = this.Filter;
			this.StateHasChanged();
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	private void LoadData()
	{
		viewModel.Initialize();
	}

	void OnSelectModel(ChangeEventArgs e)
	{
		var selectedModelId = e.Value.ToString();
		var model = modelsList.FirstOrDefault(p => p.Id == selectedModelId);
		this.viewModel.ModelFilter = model.Id == "0" ? null : model;
	}

	private void imageClickParent(PngFileViewModel model)
	{
		this.viewModel.ToggleExpandedState(model);
	}

	private async void imageClick(PngFileViewModel model)
	{
		if (model == viewModel.SelectedFile)
		{
			if (fullScreenView.IsOpen == false)
			{
				await fullScreenView.ShowAsync();
			}
		}
		else
		{
			this.viewModel.SelectedFile = model;
		}
	}

	private async Task Rescan()
	{
		await Task.Run(() =>
		{
			this.FileSystemObserver.Reset();
			this.Added = 0;
			this.Removed = 0;
			var directory = imageDir.GetPath();
			this.rescan.ProcessPngFiles(directory);
			logger.LogInformation("Rescan done");
		});
		this.scanProgess = 0;
		LoadData();
	}

	public void Dispose()
	{
		// Unsubscribe from the event when our component is disposed
		NavigationManager.LocationChanged -= LocationChanged;
		this.FileSystemObserver.FileSystemChanged -= this.OnFileSystemChanged;
	}

	private async void imageDelete()
	{
		if (this.viewModel.SelectedFile != null)
		{
			try
			{
				var filename = this.viewModel.SelectedFile.FileName;
				this.FileSystemObserver.RegisterRemoval(filename);
				File.Delete(filename);
				var original = pngfileDataSource.ReadPngFile(filename);
				original.Exists = false;
				pngfileDataSource.WritePngFile(original);
				this.thumbnailService.Delete(filename);

				this.viewModel.RemoveFile();
				if (this.viewModel.SelectedFile == null)
				{
					await this.offcanvasEnd.HideAsync();
				}
				this.StateHasChanged();
			}
			catch (Exception ex)
			{
				logger.LogError("Failed to delete.", ex);
				Messenger.AddError(title: "Delete", message: "Delete failed");
			}
		}
	}

	private async void leftKey()
	{
		viewModel.MovePrevious();
	}

	private async void rightKey()
	{
		viewModel.MoveNext();
	}

	// https://www.meziantou.net/debouncing-throttling-javascript-events-in-a-blazor-application.htm
	Action<T> Debounce<T>(Action<T> action, TimeSpan interval)
	{
		if (action == null) throw new ArgumentNullException(nameof(action));

		var last = 0;
		return arg =>
		{
			var current = System.Threading.Interlocked.Increment(ref last);
			Task.Delay(interval).ContinueWith(task =>
			{
				if (current == last)
				{
					action(arg);
				}
			});
		};
	}
}
