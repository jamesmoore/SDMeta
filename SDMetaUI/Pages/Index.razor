@page "/"
@using SDMetaUI.Models;
@using SDMetaTool;
@using System.IO.Abstractions;
@using System.Web;
@using SDMetaTool.Cache;
@using SDMetaUI.Shared

@inject IPngFileDataSource x

<PageTitle>Gallery</PageTitle>

@if (files == null)
{
	<p><em>Loading...</em></p>
}
else
{


	<div class="row gy-2 gx-3">
		<div class="col-auto">
			<label class="visually-hidden" for="autoSizingInput">Filter</label>
			<input type="text" @oninput="OnSetFilter" class="form-control" id="autoSizingInput" placeholder="filter">
		</div>
		<div class="col-auto">
			<label class="visually-hidden" for="autoSizingSelect">Preference</label>
			<select class="form-select" id="autoSizingSelect" @onchange="OnSelectGroupMode">
				@foreach (var template in GroupModes)
				{
					<option value=@template>@template</option>
				}
			</select>
		</div>
		@*
	<div class="col-auto">
	<div class="form-check">
	<input class="form-check-input" type="checkbox" id="autoSizingCheck">
	<label class="form-check-label" for="autoSizingCheck">
	Remember me
	</label>
	</div>
	</div>
	<div class="col-auto">
	<button type="submit" class="btn btn-primary">Submit</button>
	</div>
	*@
	</div>
	<Virtualize Items="@files" Context="file" OverscanCount="64" ItemSize="185">
		<HxPopover Placement="PopoverPlacement.Auto" Title="Params" Content="@file.Tooltip" Html="true" Trigger="PopoverTrigger.Hover">
			<Thumbnail file="@file" selected=@(selectedFile?.Filename == file.Filename) onclick="() => imageClick(file)" />
		</HxPopover>
		@if (file.Expanded)
		{
			<div class="divider"><div class="divider-text is-center"><span>@(expandedfiles.Count.ToString() + " gens of this prompt")</span></div></div>

			foreach (var file in expandedfiles)
			{
				<Thumbnail file="@file" selected=@(selectedFile?.Filename == file.Filename) onclick="() => OpenDrawer(file)" />
			}
			<div class="divider"></div>
		}
	</Virtualize>

	<HxOffcanvas @ref="offcanvasEnd" Placement="OffcanvasPlacement.End" ScrollingEnabled="true" Backdrop="OffcanvasBackdrop.False">
		<BodyTemplate>
			@if (selectedFile != null)
			{
				<FilePanel selectedFile="@selectedFile" />
			}
		</BodyTemplate>
	</HxOffcanvas>

}
@code {

	private HxOffcanvas offcanvasEnd;

	static List<string> GroupModes = new List<string>() {
		"Each gen",
		"Grouped by prompt"
	};
	string GroupMode = GroupModes.First();
	private IList<PngFileViewModel> allFiles = null;
	private IList<PngFileViewModel> files = null;
	private IList<PngFileViewModel> expandedfiles = null;
	private PngFile selectedFile = null;

	private string filter = "";

	protected override async Task OnInitializedAsync()
	{
		allFiles = x.GetAll().OrderByDescending(p => p.LastUpdated).Select(p => PngFileViewModel.FromModel(p)).ToList();
		SetFiles();
	}

	public void OnSetFilter(ChangeEventArgs changeEventArgs)
	{
		var filter = changeEventArgs.Value.ToString();
		this.filter = filter;
		SetFiles();
	}

	void OnSelectGroupMode(ChangeEventArgs e)
	{
		GroupMode = e.Value.ToString();
		SetFiles();
	}

	private void SetFiles()
	{
		files = allFiles.ToList();
		if (string.IsNullOrWhiteSpace(filter) == false)
		{
			files = allFiles.Where(p => p.Prompt.Contains(filter, StringComparison.InvariantCultureIgnoreCase) ||
				p.Filename.Contains(filter, StringComparison.InvariantCultureIgnoreCase)
			).ToList();
		}

		if (this.IsGrouped())
		{
			files = files.GroupBy(p => p.FullPromptHash).Select(p => p.LastOrDefault()).ToList();
		}
	}

	private bool IsGrouped()
	{
		return GroupMode == GroupModes[1];
	}

	private void imageClick(PngFileViewModel model)
	{
		if (IsGrouped())
		{
			model.Expanded = !model.Expanded;
			foreach (var file in files)
			{
				if (file.Expanded && file != model)
				{
					file.Expanded = false;
				}
			}

			if (model.Expanded)
			{
				expandedfiles = allFiles.Where(p => p.FullPromptHash == model.FullPromptHash).ToList();
			}
			else
			{
				expandedfiles = Enumerable.Empty<PngFileViewModel>().ToList();
			}
		}
		else
		{
			OpenDrawer(model);
		}
	}

	public void OpenDrawer(PngFileViewModel model)
	{
		this.selectedFile = x.ReadPngFile(model.Filename);
		offcanvasEnd.ShowAsync();
	}
}
