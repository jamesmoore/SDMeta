@page "/"
@using BlazorApp1.Models;
@using SDMetaTool;
@using System.IO.Abstractions;
@using System.Web;
@using SDMetaTool.Cache;
@using BootstrapBlazor.Components;

@inject IPngFileDataSource x

<PageTitle>Gallery</PageTitle>

@if (files == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<form class="row gy-2 gx-3 align-items-center">
		<div class="col-auto">
			<label class="visually-hidden" for="autoSizingInput">Filter</label>
			<input type="text" @oninput="OnSetFilter" class="form-control" id="autoSizingInput" placeholder="filter">
		</div>
		<div class="col-auto">
			<label class="visually-hidden" for="autoSizingSelect">Preference</label>
			<select class="form-select" id="autoSizingSelect" @onchange="OnSelectGroupMode">
				@foreach (var template in GroupModes)
				{
					<option value=@template>@template</option>
				}
			</select>
		</div>
		@*
	<div class="col-auto">
	<div class="form-check">
	<input class="form-check-input" type="checkbox" id="autoSizingCheck">
	<label class="form-check-label" for="autoSizingCheck">
	Remember me
	</label>
	</div>
	</div>
	<div class="col-auto">
	<button type="submit" class="btn btn-primary">Submit</button>
	</div>
	*@
	</form>

	<Virtualize Items="@files" Context="file" OverscanCount="50" ItemSize="185">
		<img src="@file.ImageUrl" class="img-fluid img-thumbnail rounded m-2" width="175" height="175" title="@file.Filename" @onclick="() => imageClick(file)" />
		@if (file.Expanded)
		{
			<hr />
			foreach (var file in expandedfiles)
			{
				<img src="@file.ImageUrl" class="img-fluid img-thumbnail rounded m-2" width="175" height="175" title="@file.Filename" @onclick="() => OpenDrawer(file)" />
			}
			<hr />
		}
	</Virtualize>

	<Drawer Placement="Placement.Right" @bind-IsOpen="@IsBackdropOpen" IsBackdrop="true">
		@if (selectedFile != null)
		{
			<table class="table">
				<thead>
					<tr>
						<th scope="col">Prompt</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td scope="row"><small>@selectedFile.Parameters.Prompt</small></td>
					</tr>
				</tbody>
			</table>
			<table class="table">
				<thead>
					<tr>
						<th scope="col">Negatives</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td scope="row"><small>@selectedFile.Parameters.NegativePrompt</small></td>
					</tr>
				</tbody>
			</table>
			<table class="table">
				<thead>
					<tr>
						<th scope="col">Param</th>
						<th scope="col">Value</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<th scope="row">LastUpdated</th>
						<td>@selectedFile?.LastUpdated</td>
					</tr>
					<tr>
						<th scope="row">Model</th>
						<td>@selectedFile?.Parameters.Model</td>
					</tr>
					<tr>
						<th scope="row">Model hash</th>
						<td>@selectedFile?.Parameters.ModelHash</td>
					</tr>
					<tr>
						<th scope="row">Sampler</th>
						<td>@selectedFile?.Parameters.Sampler</td>
					</tr>
					<tr>
						<th scope="row">Cfg scale</th>
						<td>@selectedFile?.Parameters.CFGScale</td>
					</tr>
					<tr>
						<th scope="row">Steps</th>
						<td>@selectedFile?.Parameters.Steps</td>
					</tr>
				</tbody>
			</table>
		}
	</Drawer>

}
@code {
	static List<string> GroupModes = new List<string>() {
		"Each gen",
		"Grouped by prompt"
	};
	string GroupMode = GroupModes.First();
	private IList<PngFileViewModel> allFiles = null;
	private IList<PngFileViewModel> files = null;
	private IList<PngFileViewModel> expandedfiles = null;
	private PngFile selectedFile = null;

	private string filter = "";

	private bool IsBackdropOpen { get; set; }

	protected override async Task OnInitializedAsync()
	{
		allFiles = x.GetAll().OrderByDescending(p => p.LastUpdated).Select(p => new PngFileViewModel()
			{
				Filename = p.Filename,
				ImageUrl = $"/images/thumb/{Base64Encode(p.Filename)}",
				LastUpdated = p.LastUpdated,
				Length = p.Length,
				Prompt = p.Parameters?.Prompt ?? "",
				FullPromptHash = p.Parameters?.Prompt + p.Parameters?.NegativePrompt ?? "",
			}).ToList();
		SetFiles();
	}

	public void OnSetFilter(ChangeEventArgs changeEventArgs)
	{
		var filter = changeEventArgs.Value.ToString();
		this.filter = filter;
		SetFiles();
	}

	public static string Base64Encode(string plainText)
	{
		var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
		return System.Convert.ToBase64String(plainTextBytes);
	}

	void OnSelectGroupMode(ChangeEventArgs e)
	{
		GroupMode = e.Value.ToString();
		SetFiles();
	}

	private void SetFiles()
	{
		files = allFiles.ToList();
		if (string.IsNullOrWhiteSpace(filter) == false)
		{
			files = allFiles.Where(p => p.Prompt.Contains(filter, StringComparison.InvariantCultureIgnoreCase) ||
				p.Filename.Contains(filter, StringComparison.InvariantCultureIgnoreCase)
			).ToList();
		}

		if (this.IsGrouped())
		{
			files = files.GroupBy(p => p.FullPromptHash).Select(p => p.LastOrDefault()).ToList();
		}
	}

	private bool IsGrouped()
	{
		return GroupMode == GroupModes[1];
	}

	private void imageClick(PngFileViewModel model)
	{
		if (IsGrouped())
		{
			model.Expanded = !model.Expanded;
			foreach (var file in files)
			{
				if (file.Expanded && file != model)
				{
					file.Expanded = false;
				}
			}

			if (model.Expanded)
			{
				expandedfiles = allFiles.Where(p => p.FullPromptHash == model.FullPromptHash).ToList();
			}
			else
			{
				expandedfiles = Enumerable.Empty<PngFileViewModel>().ToList();
			}
		}
		else
		{
			OpenDrawer(model);
		}
	}

	public void OpenDrawer(PngFileViewModel model)
	{
		this.selectedFile = x.ReadPngFile(model.Filename);
		IsBackdropOpen = true;
	}
}
